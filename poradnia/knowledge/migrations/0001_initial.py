# Generated by Django 4.2.21 on 2025-07-19 15:26

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ContentSource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
                ("base_url", models.URLField(verbose_name="Base URL")),
                ("api_endpoint", models.URLField(verbose_name="API endpoint")),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is active"),
                ),
                (
                    "last_sync",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Last sync"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
            ],
            options={
                "verbose_name": "Content source",
                "verbose_name_plural": "Content sources",
            },
        ),
        migrations.CreateModel(
            name="ProcessingLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "task_type",
                    models.CharField(
                        choices=[
                            ("Fetch articles", "Fetch Articles"),
                            ("Index articles", "Index Articles"),
                            ("Generate embeddings", "Generate Embeddings"),
                            ("Full reindexing", "Reindex All"),
                            ("Cleanup orphaned records", "Cleanup Orphaned"),
                        ],
                        max_length=50,
                        verbose_name="Task type",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Running", "Running"),
                            ("Success", "Success"),
                            ("Failed", "Failed"),
                            ("Partial success", "Partial"),
                        ],
                        default="running",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Started at"),
                ),
                (
                    "finished_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Finished at"
                    ),
                ),
                (
                    "result_data",
                    models.JSONField(default=dict, verbose_name="Result data"),
                ),
                (
                    "sentry_event_id",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Sentry event ID",
                    ),
                ),
                (
                    "log_message",
                    models.TextField(blank=True, verbose_name="Log message"),
                ),
                (
                    "command_args",
                    models.JSONField(default=dict, verbose_name="Command arguments"),
                ),
            ],
            options={
                "verbose_name": "Processing log",
                "verbose_name_plural": "Processing logs",
                "ordering": ["-started_at"],
            },
        ),
        migrations.CreateModel(
            name="SearchLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("query", models.TextField(verbose_name="Query")),
                (
                    "case_id",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Case ID"
                    ),
                ),
                (
                    "results_count",
                    models.PositiveIntegerField(verbose_name="Results count"),
                ),
                (
                    "response_time_ms",
                    models.PositiveIntegerField(verbose_name="Response time (ms)"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Search log",
                "verbose_name_plural": "Search logs",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Article",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "external_id",
                    models.CharField(max_length=100, verbose_name="External ID"),
                ),
                ("title", models.CharField(max_length=500, verbose_name="Title")),
                ("content", models.TextField(verbose_name="Content")),
                ("excerpt", models.TextField(blank=True, verbose_name="Excerpt")),
                ("url", models.URLField(verbose_name="URL")),
                (
                    "published_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Published at"
                    ),
                ),
                (
                    "modified_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Modified at"
                    ),
                ),
                (
                    "categories",
                    models.JSONField(default=list, verbose_name="Categories"),
                ),
                ("tags", models.JSONField(default=list, verbose_name="Tags")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated at"),
                ),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="articles",
                        to="knowledge.contentsource",
                        verbose_name="Source",
                    ),
                ),
            ],
            options={
                "verbose_name": "Article",
                "verbose_name_plural": "Articles",
                "ordering": ["-published_at"],
                "unique_together": {("source", "external_id")},
            },
        ),
        migrations.CreateModel(
            name="ArticleChunk",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "chunk_index",
                    models.PositiveIntegerField(verbose_name="Chunk index"),
                ),
                ("content", models.TextField(verbose_name="Content")),
                (
                    "embedding",
                    models.JSONField(blank=True, null=True, verbose_name="Embedding"),
                ),
                (
                    "token_count",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Token count"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "article",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chunks",
                        to="knowledge.article",
                        verbose_name="Article",
                    ),
                ),
            ],
            options={
                "verbose_name": "Article chunk",
                "verbose_name_plural": "Article chunks",
                "ordering": ["article", "chunk_index"],
                "unique_together": {("article", "chunk_index")},
            },
        ),
    ]
